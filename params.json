{"name":"CI PHPUnit Test","tagline":"An easier way to use PHPUnit with CodeIgniter 3.0.","body":"# CI PHPUnit Test for CodeIgniter 3.0\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/kenjis/ci-phpunit-test/v/stable)](https://packagist.org/packages/kenjis/ci-phpunit-test) [![Total Downloads](https://poser.pugx.org/kenjis/ci-phpunit-test/downloads)](https://packagist.org/packages/kenjis/ci-phpunit-test) [![Latest Unstable Version](https://poser.pugx.org/kenjis/ci-phpunit-test/v/unstable)](https://packagist.org/packages/kenjis/ci-phpunit-test) [![License](https://poser.pugx.org/kenjis/ci-phpunit-test/license)](https://packagist.org/packages/kenjis/ci-phpunit-test)\r\n\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/kenjis/ci-phpunit-test/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/kenjis/ci-phpunit-test/?branch=master)\r\n[![Coverage Status](https://coveralls.io/repos/kenjis/ci-phpunit-test/badge.svg?branch=master)](https://coveralls.io/r/kenjis/ci-phpunit-test?branch=master)\r\n[![Build Status](https://travis-ci.org/kenjis/ci-phpunit-test.svg?branch=master)](https://travis-ci.org/kenjis/ci-phpunit-test)\r\n\r\nAn easier way to use PHPUnit with [CodeIgniter](https://github.com/bcit-ci/CodeIgniter) 3.0.\r\n\r\n* You don't have to modify CodeIgniter core files at all.\r\n* You can write controller tests easily.\r\n* Well documented.\r\n\r\n![Screenshot: Running tests on NetBeans](http://forum.codeigniter.com/attachment.php?aid=210)\r\n\r\n## Requirements\r\n\r\n* PHP 5.4.0 or later\r\n* CodeIgniter 3.0.*\r\n* PHPUnit\r\n\r\n## Change Log\r\n\r\nSee [Change Log](https://github.com/kenjis/ci-phpunit-test/blob/master/docs/ChangeLog.md).\r\n\r\n## Folder Structure\r\n\r\n~~~\r\ncodeigniter/\r\n├── application/\r\n│   └── tests/\r\n│        ├── _ci_phpunit_test/ ... don't touch! files CI PHPUnit Test uses\r\n│        ├── Bootstrap.php     ... bootstrap file for PHPUnit\r\n│        ├── TestCase.php      ... TestCase class\r\n│        ├── controllers/      ... put your controller tests\r\n│        ├── mocks/\r\n│        │   └── libraries/    ... mock libraries\r\n│        ├── models/           ... put your model tests\r\n│        └── phpunit.xml       ... config file for PHPUnit\r\n└── vendor/\r\n~~~\r\n\r\n## Installation\r\n\r\nDownload latest `ci-phpunit-test`: https://github.com/kenjis/ci-phpunit-test/releases\r\n\r\nUnzip and copy `application/tests` folder into your `application` folder in CodeIgniter project. That's it.\r\n\r\nIf you like Composer:\r\n\r\n~~~\r\n$ cd /path/to/codeigniter/\r\n$ composer require kenjis/ci-phpunit-test --dev\r\n~~~\r\n\r\nAnd run `install.php`:\r\n\r\n~~~\r\n$ php vendor/kenjis/ci-phpunit-test/install.php\r\n~~~\r\n\r\n* Above command always overwrites exisiting files.\r\n* You must run it at CodeIgniter project root folder.\r\n\r\n## Upgrading\r\n\r\nDownload latest `ci-phpunit-test`: https://github.com/kenjis/ci-phpunit-test/releases\r\n\r\nUnzip and replace `application/tests/_ci_phpunit_test` folder.\r\n\r\nIf you like Composer:\r\n\r\n~~~\r\n$ cd /path/to/codeigniter/\r\n$ composer update kenjis/ci-phpunit-test\r\n$ php vendor/kenjis/ci-phpunit-test/update.php\r\n~~~\r\n\r\n## How to Run Tests\r\n\r\nYou have to install PHPUnit before running tests.\r\n\r\n~~~\r\n$ cd /path/to/codeigniter/\r\n$ cd application/tests/\r\n$ phpunit\r\nPHPUnit 4.6.10 by Sebastian Bergmann and contributors.\r\n\r\nConfiguration read from /.../codeigniter/application/tests/phpunit.xml\r\n\r\n...\r\n\r\nTime: 635 ms, Memory: 4.50Mb\r\n\r\nOK (3 tests, 4 assertions)\r\n\r\nGenerating code coverage report in Clover XML format ... done\r\n\r\nGenerating code coverage report in HTML format ... done\r\n~~~\r\n\r\nTo generate coverage report, Xdebug is needed.\r\n\r\n## How to Write Tests\r\n\r\nSee [How To Write Tests](https://github.com/kenjis/ci-phpunit-test/blob/master/docs/HowToWriteTests.md).\r\n\r\n## Can and Can't\r\n\r\n*CI PHPUnit Test* does not want to modify CodeIgniter core files. The more you modify core, the more you get difficulities when you update CodeIgniter.\r\n\r\nIn fact, it uses a modified class and a few functions. But I try to modify as little as possible.\r\n\r\nThe functions and the class which are modified:\r\n\r\n* function `load_class()`\r\n* function `is_loaded()`\r\n* function `is_cli()`\r\n* function `show_error()`\r\n* function `show_404()`\r\n* function `set_status_header()`\r\n* class `CI_Loader`\r\n\r\nThey are in `tests/_ci_phpunit_test/replacing` folder.\r\n\r\nAnd *CI PHPUnit Test* adds a property dynamically:\r\n\r\n* property `CI_Output::_status`\r\n\r\n### MY_Loader\r\n\r\n*CI PHPUnit Test* replaces `CI_Loader` and modifies below methods:\r\n\r\n* `CI_Loader::model()`\r\n* `CI_Loader::_ci_load_library()`\r\n* `CI_Loader::_ci_load_stock_library()`\r\n\r\nBut if you place MY_Loader, your MY_Loader extends the loader of *CI PHPUnit Test*.\r\n\r\nIf your MY_Loader overrides the above methods, probably *CI PHPUnit Test* does not work correctly.\r\n\r\n### `exit()`\r\n\r\n*CI PHPUnit Test* does not care functions/classes which `exit()` or `die()` (Except for [show_error() and show_404()](https://github.com/kenjis/ci-phpunit-test/blob/master/docs/HowToWriteTests.md#show_error-and-show_404)).\r\n\r\nSo, for example, if you use URL helper `redirect()` in your application code, your testing ends with it.\r\n\r\nI recommend you not to use `exit()` or `die()` in your code. And you have to skip `exit()` somehow in CodeIgniter code.\r\n\r\nFor example, you can modify `redirect()` using `MY_url_helper.php` in your application. I put a sample [MY_url_helper.php](https://github.com/kenjis/ci-phpunit-test/blob/master/application/helpers/MY_url_helper.php). (I think CodeIgniter code itself should be changed testable.)\r\n\r\nSee [How to Write Tests](https://github.com/kenjis/ci-phpunit-test/blob/master/docs/HowToWriteTests.md#redirect) for details.\r\n\r\n### Reset CodeIgniter object\r\n\r\nCodeIgniter has a function `get_instance()` to get the CodeIgniter object (CodeIgniter instance or CodeIgniter super object).\r\n\r\n*CI PHPUnit Test* has a new function `reset_instance()` which reset the current CodeIgniter object. After resetting, you can create a new your Controller instance with new state.\r\n\r\nYou can see how to use it in [application/tests/_ci_phpunit_test/CIPHPUnitTestCase.php](https://github.com/kenjis/ci-phpunit-test/blob/master/application/tests/_ci_phpunit_test/CIPHPUnitTestCase.php).\r\n\r\n## Function/Class Reference\r\n\r\nSee [Function and Class Reference](https://github.com/kenjis/ci-phpunit-test/blob/master/docs/FunctionAndClassReference.md).\r\n\r\n## Related Projects for CodeIgniter 3.0\r\n\r\n* [CodeIgniter Composer Installer](https://github.com/kenjis/codeigniter-composer-installer)\r\n* [Cli for CodeIgniter 3.0](https://github.com/kenjis/codeigniter-cli)\r\n* [CodeIgniter Simple and Secure Twig](https://github.com/kenjis/codeigniter-ss-twig)\r\n* [CodeIgniter Doctrine](https://github.com/kenjis/codeigniter-doctrine)\r\n* [CodeIgniter Deployer](https://github.com/kenjis/codeigniter-deployer)\r\n* [CodeIgniter3 Filename Checker](https://github.com/kenjis/codeigniter3-filename-checker)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}